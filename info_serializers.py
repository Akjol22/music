'''Скриализаторы'''

# 1. serializers.Serializer
# (прописываем все поля модели
# для серивлизации/десериализации
# и можно доп.роля, переопределяем
# методы create(), upbdate(), delete()


# 2. serializers.ModelSerializer
# автоматичестки генерирует поля на основные модели, автоматичестки генерирует валидпторы
# crate(), update(), delete() ... реализованы по умалчанию

# перед доступом к проверенным данным, необходимо вызвать метод is_valid()
# (метод, который вызывает все проверки сериализатора)

# save(*args, **kwargs) - создает объект, после проверки всех данных

# self.context - словарь, в котором хронятся данные -> которые можно
# передать в сериализаторы

# to_pepresentation(self, instance) - метод за преобразование одно оюъекта в json,
# для изменения выходных даннных сериализатора
# для добавления доп. данных (через related_name - можно вывести связанные объекты)
# super().to_representation(instance) - возврашает словарь, (поля, которые указаны в Meta)


'''Полидпторы/проверки'''
# на основе функция - когда, валидаторы использувается в разных классах сериализатора
# field_name = serializers.CharField(
# validators = [названия_функции])

# пользоватительские валидаторы
# 1. custom field (на уревне поля)
# dev validate_field_name(self, filed):

# 2. object-level (на уревне объекта)
# def validate(self, data):
# (data- словарь с даннами)
